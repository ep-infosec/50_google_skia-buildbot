// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	vfs "go.skia.org/infra/go/vfs"
)

// FS is an autogenerated mock type for the FS type
type FS struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *FS) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: ctx, name
func (_m *FS) Open(ctx context.Context, name string) (vfs.File, error) {
	ret := _m.Called(ctx, name)

	var r0 vfs.File
	if rf, ok := ret.Get(0).(func(context.Context, string) vfs.File); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(vfs.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFS creates a new instance of FS. It also registers a cleanup function to assert the mocks expectations.
func NewFS(t testing.TB) *FS {
	mock := &FS{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
