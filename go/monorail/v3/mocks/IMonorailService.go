// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	monorail "go.skia.org/infra/go/monorail/v3"

	testing "testing"
)

// IMonorailService is an autogenerated mock type for the IMonorailService type
type IMonorailService struct {
	mock.Mock
}

// GetEmail provides a mock function with given fields: userName
func (_m *IMonorailService) GetEmail(userName string) (*monorail.MonorailUser, error) {
	ret := _m.Called(userName)

	var r0 *monorail.MonorailUser
	if rf, ok := ret.Get(0).(func(string) *monorail.MonorailUser); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*monorail.MonorailUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIssue provides a mock function with given fields: issueName
func (_m *IMonorailService) GetIssue(issueName string) (*monorail.MonorailIssue, error) {
	ret := _m.Called(issueName)

	var r0 *monorail.MonorailIssue
	if rf, ok := ret.Get(0).(func(string) *monorail.MonorailIssue); ok {
		r0 = rf(issueName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*monorail.MonorailIssue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(issueName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIssueLink provides a mock function with given fields: instance, id
func (_m *IMonorailService) GetIssueLink(instance string, id string) string {
	ret := _m.Called(instance, id)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(instance, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MakeIssue provides a mock function with given fields: instance, owner, summary, description, status, priority, issueType, labels, componentDefIDs, ccUsers
func (_m *IMonorailService) MakeIssue(instance string, owner string, summary string, description string, status string, priority string, issueType string, labels []string, componentDefIDs []string, ccUsers []string) (*monorail.MonorailIssue, error) {
	ret := _m.Called(instance, owner, summary, description, status, priority, issueType, labels, componentDefIDs, ccUsers)

	var r0 *monorail.MonorailIssue
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string, string, []string, []string, []string) *monorail.MonorailIssue); ok {
		r0 = rf(instance, owner, summary, description, status, priority, issueType, labels, componentDefIDs, ccUsers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*monorail.MonorailIssue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string, string, []string, []string, []string) error); ok {
		r1 = rf(instance, owner, summary, description, status, priority, issueType, labels, componentDefIDs, ccUsers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchIssuesWithPagination provides a mock function with given fields: instance, query
func (_m *IMonorailService) SearchIssuesWithPagination(instance string, query string) ([]monorail.MonorailIssue, error) {
	ret := _m.Called(instance, query)

	var r0 []monorail.MonorailIssue
	if rf, ok := ret.Get(0).(func(string, string) []monorail.MonorailIssue); ok {
		r0 = rf(instance, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]monorail.MonorailIssue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(instance, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetOwnerAndAddComment provides a mock function with given fields: instance, owner, comment, id
func (_m *IMonorailService) SetOwnerAndAddComment(instance string, owner string, comment string, id string) error {
	ret := _m.Called(instance, owner, comment, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(instance, owner, comment, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMonorailService creates a new instance of IMonorailService. It also registers a cleanup function to assert the mocks expectations.
func NewIMonorailService(t testing.TB) *IMonorailService {
	mock := &IMonorailService{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
