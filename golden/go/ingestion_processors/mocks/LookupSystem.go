// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// LookupSystem is an autogenerated mock type for the LookupSystem type
type LookupSystem struct {
	mock.Mock
}

// Lookup provides a mock function with given fields: ctx, tjID
func (_m *LookupSystem) Lookup(ctx context.Context, tjID string) (string, string, int, error) {
	ret := _m.Called(ctx, tjID)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, tjID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = rf(ctx, tjID)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func(context.Context, string) int); ok {
		r2 = rf(ctx, tjID)
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(context.Context, string) error); ok {
		r3 = rf(ctx, tjID)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewLookupSystem creates a new instance of LookupSystem. It also registers a cleanup function to assert the mocks expectations.
func NewLookupSystem(t testing.TB) *LookupSystem {
	mock := &LookupSystem{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
