// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Processor is an autogenerated mock type for the Processor type
type Processor struct {
	mock.Mock
}

// HandlesFile provides a mock function with given fields: name
func (_m *Processor) HandlesFile(name string) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Process provides a mock function with given fields: ctx, filename
func (_m *Processor) Process(ctx context.Context, filename string) error {
	ret := _m.Called(ctx, filename)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, filename)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProcessor creates a new instance of Processor. It also registers a cleanup function to assert the mocks expectations.
func NewProcessor(t testing.TB) *Processor {
	mock := &Processor{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
