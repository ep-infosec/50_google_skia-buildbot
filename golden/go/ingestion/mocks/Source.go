// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Source is an autogenerated mock type for the Source type
type Source struct {
	mock.Mock
}

// GetReader provides a mock function with given fields: ctx, name
func (_m *Source) GetReader(ctx context.Context, name string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, name)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandlesFile provides a mock function with given fields: name
func (_m *Source) HandlesFile(name string) bool {
	ret := _m.Called(name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewSource creates a new instance of Source. It also registers a cleanup function to assert the mocks expectations.
func NewSource(t testing.TB) *Source {
	mock := &Source{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
