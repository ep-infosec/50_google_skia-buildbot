// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	paramtools "go.skia.org/infra/go/paramtools"

	testing "testing"

	types "go.skia.org/infra/perf/go/types"
)

// OPSProvider is an autogenerated mock type for the OPSProvider type
type OPSProvider struct {
	mock.Mock
}

// GetLatestTile provides a mock function with given fields: _a0
func (_m *OPSProvider) GetLatestTile(_a0 context.Context) (types.TileNumber, error) {
	ret := _m.Called(_a0)

	var r0 types.TileNumber
	if rf, ok := ret.Get(0).(func(context.Context) types.TileNumber); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.TileNumber)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetParamSet provides a mock function with given fields: ctx, tileNumber
func (_m *OPSProvider) GetParamSet(ctx context.Context, tileNumber types.TileNumber) (paramtools.ReadOnlyParamSet, error) {
	ret := _m.Called(ctx, tileNumber)

	var r0 paramtools.ReadOnlyParamSet
	if rf, ok := ret.Get(0).(func(context.Context, types.TileNumber) paramtools.ReadOnlyParamSet); ok {
		r0 = rf(ctx, tileNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(paramtools.ReadOnlyParamSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, types.TileNumber) error); ok {
		r1 = rf(ctx, tileNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOPSProvider creates a new instance of OPSProvider. It also registers a cleanup function to assert the mocks expectations.
func NewOPSProvider(t testing.TB) *OPSProvider {
	mock := &OPSProvider{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
