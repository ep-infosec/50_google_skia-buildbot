// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	types "go.skia.org/infra/npm-audit-mirror/go/types"
)

// Check is an autogenerated mock type for the Check type
type Check struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *Check) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PerformCheck provides a mock function with given fields: packageName, packageVersion, npmPackage
func (_m *Check) PerformCheck(packageName string, packageVersion string, npmPackage *types.NpmPackage) (bool, string, error) {
	ret := _m.Called(packageName, packageVersion, npmPackage)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, *types.NpmPackage) bool); ok {
		r0 = rf(packageName, packageVersion, npmPackage)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(string, string, *types.NpmPackage) string); ok {
		r1 = rf(packageName, packageVersion, npmPackage)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, *types.NpmPackage) error); ok {
		r2 = rf(packageName, packageVersion, npmPackage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCheck creates a new instance of Check. It also registers a cleanup function to assert the mocks expectations.
func NewCheck(t testing.TB) *Check {
	mock := &Check{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
